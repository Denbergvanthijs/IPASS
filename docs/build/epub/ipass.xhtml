<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Package: ipass</title>
    <link rel="stylesheet" href="_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="_static/pygments.css" type="text/css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="package-ipass">
<h1>Package: ipass</h1>
<div class="section" id="subpackages">
<h2>Subpackages</h2>
<div class="toctree-wrapper compound">
<ul>
<li class="toctree-l1"><a class="reference internal" href="ipass.plot.xhtml">Package: ipass.plot</a><ul>
<li class="toctree-l2"><a class="reference internal" href="ipass.plot.xhtml#module-ipass.plot.norm_verd">Module: ipass.plot.norm_verd</a></li>
<li class="toctree-l2"><a class="reference internal" href="ipass.plot.xhtml#module-ipass.plot.plot">Module: ipass.plot.plot</a></li>
</ul>
</li>
</ul>
</div>
</div>
<div class="section" id="module-ipass.bereken">
<span id="module-ipass-bereken"></span><h2>Module: ipass.bereken</h2>
<dl class="function">
<dt id="ipass.bereken.grens">
<code class="descclassname">ipass.bereken.</code><code class="descname">grens</code><span class="sig-paren">(</span><em>grens_perc: float</em>, <em>mu: float</em>, <em>sigma: float</em><span class="sig-paren">)</span> &#x2192; float</dt>
<dd><p>Berekend het aantal standaard deviaties dat nodig is om op een bepaalde cumulatieve kans te komen.
Dezelfde functie als invNorm op de Texas Instruments grafische rekenmachines.
0.00 &lt; grens &lt; 1.00
Kan gebruikt worden om de hoogte van de Ellipse in Voronoi-diagrammen te bepalen</p>
<dl class="field-list simple">
<dt class="field-odd">Parameters</dt>
<dd class="field-odd"><ul class="simple">
<li><p><strong>grens_perc</strong> – getal tussen 0 en 1. Stel grens_waarde is 0.2 dan wordt het aantal standaard deviaties van mu(50%) tot 20% berekend.</p></li>
<li><p><strong>mu</strong> – gemiddelde van de normale verdelingen</p></li>
<li><p><strong>sigma</strong> – standaard deviatie van de normale verdelingen</p></li>
</ul>
</dd>
<dt class="field-even">Returns</dt>
<dd class="field-even"><p>het aantal standaard deviaties van mu tot de grens_waarde</p>
</dd>
</dl>
</dd></dl>

<dl class="function">
<dt id="ipass.bereken.helling">
<code class="descclassname">ipass.bereken.</code><code class="descname">helling</code><span class="sig-paren">(</span><em>punt1: numpy.ndarray</em>, <em>punt2: numpy.ndarray</em><span class="sig-paren">)</span> &#x2192; float</dt>
<dd><p>Berekend de helling in graden tussen twee coordinaten.
Kan gebruikt worden om de richting van de Ellipse in Voronoi-diagrammen te bepalen.</p>
<dl class="field-list simple">
<dt class="field-odd">Parameters</dt>
<dd class="field-odd"><ul class="simple">
<li><p><strong>punt1</strong> – Numpy array met een enkele row: [x, y]</p></li>
<li><p><strong>punt2</strong> – Numpy array met een enkele row: [x, y]</p></li>
</ul>
</dd>
<dt class="field-even">Returns</dt>
<dd class="field-even"><p>de hoek in aantal graden tussen punt1 en punt2</p>
</dd>
</dl>
</dd></dl>

<dl class="function">
<dt id="ipass.bereken.matrix_maal_matrix">
<code class="descclassname">ipass.bereken.</code><code class="descname">matrix_maal_matrix</code><span class="sig-paren">(</span><em>m1: numpy.ndarray</em>, <em>m2: numpy.ndarray</em><span class="sig-paren">)</span> &#x2192; numpy.ndarray</dt>
<dd><p>Vermenigvuldigd matrix m maal n en zet alle waardes boven 1, op 1.
Dit aangezien de ‘infectiegraad’ nooit meer dan 100% kan zijn.</p>
<dl class="field-list simple">
<dt class="field-odd">Parameters</dt>
<dd class="field-odd"><ul class="simple">
<li><p><strong>m1</strong> – matrix van n bij n</p></li>
<li><p><strong>m2</strong> – matrix van n bij n</p></li>
</ul>
</dd>
<dt class="field-even">Returns</dt>
<dd class="field-even"><p>matrix van n bij n, geen enkele waarde meer dan 1</p>
</dd>
</dl>
</dd></dl>

<dl class="function">
<dt id="ipass.bereken.matrix_vec_verloop">
<code class="descclassname">ipass.bereken.</code><code class="descname">matrix_vec_verloop</code><span class="sig-paren">(</span><em>punten: numpy.ndarray</em>, <em>vector: numpy.ndarray</em>, <em>perioden: int</em>, <em>mu: float = 0</em>, <em>sigma: float = 1</em><span class="sig-paren">)</span> &#x2192; numpy.ndarray</dt>
<dd><p>Berekend voor iedere stap in de tijd de matrix uit. Iedere stap wordt opgeslagen en vormen samen
een n bij m matrix. N voor het aantal punten en m voor het aantal periodes.</p>
<dl class="field-list simple">
<dt class="field-odd">Parameters</dt>
<dd class="field-odd"><ul class="simple">
<li><p><strong>punten</strong> – Numpy array van n bij 2. Iedere row bevat een x en y coördinaat.</p></li>
<li><p><strong>vector</strong> – Numpy array van n bij 1. Bevat per cell 0 of 1. Iedere cell waar 1 staat, begint de infectie.</p></li>
<li><p><strong>perioden</strong> – Het aantal perioden dat het verloop berekend en getoont moet worden.</p></li>
<li><p><strong>mu</strong> – gemiddelde van de normale verdelingen</p></li>
<li><p><strong>sigma</strong> – standaard deviatie van de normale verdelingen</p></li>
</ul>
</dd>
<dt class="field-even">Returns</dt>
<dd class="field-even"><p>n bij m matrix met het verloop. Kan worden geplot</p>
</dd>
</dl>
</dd></dl>

<dl class="function">
<dt id="ipass.bereken.middelpunt_afstanden">
<code class="descclassname">ipass.bereken.</code><code class="descname">middelpunt_afstanden</code><span class="sig-paren">(</span><em>punten: numpy.ndarray</em><span class="sig-paren">)</span> &#x2192; list</dt>
<dd><p>Berekend de afstand tot het middelpunt voor iedere combinatie van twee punten.
Input is een np.array() van N bij 2.
Gebaseerd op: <a class="reference external" href="https://github.com/scipy/scipy/blob/master/scipy/spatial/_plotutils.py">https://github.com/scipy/scipy/blob/master/scipy/spatial/_plotutils.py</a></p>
<dl class="field-list simple">
<dt class="field-odd">Parameters</dt>
<dd class="field-odd"><p><strong>punten</strong> – Numpy array van n bij 2. Iedere row bevat een x en y coördinaat.</p>
</dd>
<dt class="field-even">Returns</dt>
<dd class="field-even"><p>lijst van afstanden tussen alle belanghebbende punten</p>
</dd>
</dl>
</dd></dl>

<dl class="function">
<dt id="ipass.bereken.perc_overlap">
<code class="descclassname">ipass.bereken.</code><code class="descname">perc_overlap</code><span class="sig-paren">(</span><em>mid_afstand: float</em>, <em>mu: float</em>, <em>sigma: float</em><span class="sig-paren">)</span> &#x2192; float</dt>
<dd><dl>
<dt>Berekend het percentage overlap tussen twee punten.</dt>
<dd><p>norm.cdf(-n) berekend de kans tot n SD.
In de wiskunde wordt vaak (1 - norm.cdf(n)) i.p.v. bovenstaande</p>
<p>Door deze waarde maal twee te doen hebben we de totale overlapping.</p>
</dd>
</dl>
<dl class="field-list simple">
<dt class="field-odd">Parameters</dt>
<dd class="field-odd"><ul class="simple">
<li><p><strong>mid_afstand</strong> – Afstand van de twee punten tot het middelpunt</p></li>
<li><p><strong>mu</strong> – gemiddelde van de normale verdelingen</p></li>
<li><p><strong>sigma</strong> – standaard deviatie van de normale verdelingen</p></li>
</ul>
</dd>
<dt class="field-even">Returns</dt>
<dd class="field-even"><p>het totale percentage dat de twee normale verdelingen elkaar overlappen.
0 &lt; perc &lt; 1</p>
</dd>
</dl>
</dd></dl>

<dl class="function">
<dt id="ipass.bereken.perc_overlap_matrix">
<code class="descclassname">ipass.bereken.</code><code class="descname">perc_overlap_matrix</code><span class="sig-paren">(</span><em>punten: numpy.ndarray</em>, <em>mu: float</em>, <em>sigma: float</em><span class="sig-paren">)</span> &#x2192; numpy.ndarray</dt>
<dd><dl class="field-list simple">
<dt class="field-odd">Parameters</dt>
<dd class="field-odd"><ul class="simple">
<li><p><strong>punten</strong> – Numpy array van n bij 2. Iedere row bevat een x en y coördinaat.</p></li>
<li><p><strong>mu</strong> – gemiddelde van de normale verdelingen</p></li>
<li><p><strong>sigma</strong> – standaard deviatie van de normale verdelingen</p></li>
</ul>
</dd>
<dt class="field-even">Returns</dt>
<dd class="field-even"><p>matrix van n bij n met alle percentages dat de punten overlappen</p>
</dd>
</dl>
</dd></dl>

<dl class="function">
<dt id="ipass.bereken.perc_volledige_infectie">
<code class="descclassname">ipass.bereken.</code><code class="descname">perc_volledige_infectie</code><span class="sig-paren">(</span><em>matrix_verloop: numpy.ndarray</em><span class="sig-paren">)</span> &#x2192; tuple</dt>
<dd><p>Berekend voor ieder punt in punten_matrix na hoeveel periodes deze volledig was geinfecteerd.
Berekend vervolgens op hoeveel procent van de totale duur dat was.
Iedere rij staat voor een punt. De lengte van de rij voor het aantal periodes.</p>
<dl class="field-list simple">
<dt class="field-odd">Parameters</dt>
<dd class="field-odd"><p><strong>matrix_verloop</strong> – matrix van n bij m. n-aantal punten en m-aantal periodes</p>
</dd>
<dt class="field-even">Returns</dt>
<dd class="field-even"><p>tuple met op hoeveel procent ieder punt volledig was geinfecteerd</p>
</dd>
</dl>
</dd></dl>

</div>
<div class="section" id="module-ipass.convertCSV">
<span id="module-ipass-convertcsv"></span><h2>Module: ipass.convertCSV</h2>
<dl class="function">
<dt id="ipass.convertCSV.coord2coord">
<code class="descclassname">ipass.convertCSV.</code><code class="descname">coord2coord</code><span class="sig-paren">(</span><em>file_path: str</em>, <em>lat_header: str</em>, <em>long_header: str</em><span class="sig-paren">)</span> &#x2192; None</dt>
<dd><p>Haalt uit een CSV-bestand de latitude- en longitudekolom.
De gebruiker dient de namen van de kolommen waarde latitude en logitude
zijn opgeslagen op te geven.
Deze kolommen worden opgeslagen in een nieuw bestand met de prefix <cite>geo_</cite>.</p>
<p>Het bestand kan vervolgens worden gebruikt om Voronoi’s of kaarten te maken.</p>
<dl class="field-list simple">
<dt class="field-odd">Parameters</dt>
<dd class="field-odd"><ul class="simple">
<li><p><strong>file_path</strong> – totale path naar het te converteren bestand</p></li>
<li><p><strong>lat_header</strong> – naam van de kolom die de latitude bevat</p></li>
<li><p><strong>long_header</strong> – naam van de kolom die de longiutde bevat</p></li>
</ul>
</dd>
<dt class="field-even">Returns</dt>
<dd class="field-even"><p>Geconverteerd bestand opgeslagen in data/output/. Bestand bevat de headers latitude en longitude</p>
</dd>
</dl>
</dd></dl>

<dl class="function">
<dt id="ipass.convertCSV.straat2coord">
<code class="descclassname">ipass.convertCSV.</code><code class="descname">straat2coord</code><span class="sig-paren">(</span><em>file_path: str</em>, <em>woonplaats: str</em>, <em>woonplaats_header: str</em>, <em>adres_header: str</em>, <em>sep: str = ';'</em><span class="sig-paren">)</span> &#x2192; None</dt>
<dd><p>Berekend aan de hand van een CSV-bestand de breedte- en hoogtegraad.
Resultaten worden opgeslagen in een nieuw CSV-bestand <cite>data/geoDataKDV.csv</cite>.
Als input wordt om een woonplaats gevraagd. Alle punten die aan de waarde ‘woonplaats voldoen’
in de kolom ‘woonplaatsHeader’ worden geimporteerd.</p>
<p>De breedte- en lengtegraad van de waardes die zich bevinden in de kolom ‘adresHeader’ worden opgevraagd.
Duplicaten worden direct overgeslagen.</p>
<dl class="field-list simple">
<dt class="field-odd">Parameters</dt>
<dd class="field-odd"><ul class="simple">
<li><p><strong>file_path</strong> – totale path naar het te converteren bestand</p></li>
<li><p><strong>woonplaats</strong> – woonplaats waar een selectie uit (landelijke) data word gehaald</p></li>
<li><p><strong>woonplaats_header</strong> – kolom waar de waarde <cite>woonplaats</cite> zich in bevind</p></li>
<li><p><strong>adres_header</strong> – kolom met de adressen die omgezet mooeten worden. Idealieter adres + huisnummer</p></li>
<li><p><strong>sep</strong> – separator voor CSV-bestand, standaard ‘;’ maar kan ook ‘,’ of iets anders zijn</p></li>
</ul>
</dd>
<dt class="field-even">Returns</dt>
<dd class="field-even"><p>Geconverteerd bestand opgeslagen in data/output/. Bestand bevat de headers latitude en longitude</p>
</dd>
</dl>
</dd></dl>

</div>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>